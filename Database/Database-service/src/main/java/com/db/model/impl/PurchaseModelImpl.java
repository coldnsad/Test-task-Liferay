/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.db.model.impl;

import com.db.model.Purchase;
import com.db.model.PurchaseModel;
import com.db.model.PurchaseSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Purchase service. Represents a row in the &quot;db_Purchase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PurchaseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PurchaseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PurchaseImpl
 * @generated
 */
@JSON(strict = true)
public class PurchaseModelImpl
	extends BaseModelImpl<Purchase> implements PurchaseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a purchase model instance should use the <code>Purchase</code> interface instead.
	 */
	public static final String TABLE_NAME = "db_Purchase";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"electronicId", Types.BIGINT},
		{"employeeId", Types.BIGINT}, {"purchaseDate", Types.TIMESTAMP},
		{"purchaseTypeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("electronicId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("purchaseDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("purchaseTypeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table db_Purchase (id_ LONG not null primary key,electronicId LONG,employeeId LONG,purchaseDate DATE null,purchaseTypeId LONG)";

	public static final String TABLE_SQL_DROP = "drop table db_Purchase";

	public static final String ORDER_BY_JPQL = " ORDER BY purchase.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY db_Purchase.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Purchase toModel(PurchaseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Purchase model = new PurchaseImpl();

		model.setId(soapModel.getId());
		model.setElectronicId(soapModel.getElectronicId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setPurchaseDate(soapModel.getPurchaseDate());
		model.setPurchaseTypeId(soapModel.getPurchaseTypeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Purchase> toModels(PurchaseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Purchase> models = new ArrayList<Purchase>(soapModels.length);

		for (PurchaseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PurchaseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Purchase.class;
	}

	@Override
	public String getModelClassName() {
		return Purchase.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Purchase, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Purchase, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Purchase, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Purchase)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Purchase, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Purchase, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Purchase)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Purchase, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Purchase, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Purchase, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Purchase, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Purchase, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Purchase, Object>>();
		Map<String, BiConsumer<Purchase, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Purchase, ?>>();

		attributeGetterFunctions.put("id", Purchase::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Purchase, Long>)Purchase::setId);
		attributeGetterFunctions.put("electronicId", Purchase::getElectronicId);
		attributeSetterBiConsumers.put(
			"electronicId",
			(BiConsumer<Purchase, Long>)Purchase::setElectronicId);
		attributeGetterFunctions.put("employeeId", Purchase::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId", (BiConsumer<Purchase, Long>)Purchase::setEmployeeId);
		attributeGetterFunctions.put("purchaseDate", Purchase::getPurchaseDate);
		attributeSetterBiConsumers.put(
			"purchaseDate",
			(BiConsumer<Purchase, Date>)Purchase::setPurchaseDate);
		attributeGetterFunctions.put(
			"purchaseTypeId", Purchase::getPurchaseTypeId);
		attributeSetterBiConsumers.put(
			"purchaseTypeId",
			(BiConsumer<Purchase, Long>)Purchase::setPurchaseTypeId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("id_"));
	}

	@JSON
	@Override
	public long getElectronicId() {
		return _electronicId;
	}

	@Override
	public void setElectronicId(long electronicId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_electronicId = electronicId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public Date getPurchaseDate() {
		return _purchaseDate;
	}

	@Override
	public void setPurchaseDate(Date purchaseDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_purchaseDate = purchaseDate;
	}

	@JSON
	@Override
	public long getPurchaseTypeId() {
		return _purchaseTypeId;
	}

	@Override
	public void setPurchaseTypeId(long purchaseTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_purchaseTypeId = purchaseTypeId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Purchase.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Purchase toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Purchase>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PurchaseImpl purchaseImpl = new PurchaseImpl();

		purchaseImpl.setId(getId());
		purchaseImpl.setElectronicId(getElectronicId());
		purchaseImpl.setEmployeeId(getEmployeeId());
		purchaseImpl.setPurchaseDate(getPurchaseDate());
		purchaseImpl.setPurchaseTypeId(getPurchaseTypeId());

		purchaseImpl.resetOriginalValues();

		return purchaseImpl;
	}

	@Override
	public int compareTo(Purchase purchase) {
		int value = 0;

		if (getId() < purchase.getId()) {
			value = -1;
		}
		else if (getId() > purchase.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Purchase)) {
			return false;
		}

		Purchase purchase = (Purchase)object;

		long primaryKey = purchase.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Purchase> toCacheModel() {
		PurchaseCacheModel purchaseCacheModel = new PurchaseCacheModel();

		purchaseCacheModel.id = getId();

		purchaseCacheModel.electronicId = getElectronicId();

		purchaseCacheModel.employeeId = getEmployeeId();

		Date purchaseDate = getPurchaseDate();

		if (purchaseDate != null) {
			purchaseCacheModel.purchaseDate = purchaseDate.getTime();
		}
		else {
			purchaseCacheModel.purchaseDate = Long.MIN_VALUE;
		}

		purchaseCacheModel.purchaseTypeId = getPurchaseTypeId();

		return purchaseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Purchase, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Purchase, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Purchase, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Purchase)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Purchase, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Purchase, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Purchase, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Purchase)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Purchase>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Purchase.class, ModelWrapper.class);

	}

	private long _id;
	private long _electronicId;
	private long _employeeId;
	private Date _purchaseDate;
	private long _purchaseTypeId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Purchase, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Purchase)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("electronicId", _electronicId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("purchaseDate", _purchaseDate);
		_columnOriginalValues.put("purchaseTypeId", _purchaseTypeId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("electronicId", 2L);

		columnBitmasks.put("employeeId", 4L);

		columnBitmasks.put("purchaseDate", 8L);

		columnBitmasks.put("purchaseTypeId", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Purchase _escapedModel;

}